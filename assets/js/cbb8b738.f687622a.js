"use strict";(self.webpackChunkscience_island_docs=self.webpackChunkscience_island_docs||[]).push([[4530],{5506:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"project-management/coding-conventions/pull-requests","title":"Pull Requests","description":"Step-by-Step GitHub Process","source":"@site/docs/04-project-management/01-coding-conventions/04-pull-requests.md","sourceDirName":"04-project-management/01-coding-conventions","slug":"/project-management/coding-conventions/pull-requests","permalink":"/si-docs/project-management/coding-conventions/pull-requests","draft":false,"unlisted":false,"editUrl":"https://github.com/EducationNetworkGroup/si-docs/tree/main/docs/04-project-management/01-coding-conventions/04-pull-requests.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"descriptions":"Conventions and best practices for pull requests."},"sidebar":"tutorialSidebar","previous":{"title":"Commits","permalink":"/si-docs/project-management/coding-conventions/commits"},"next":{"title":"Code Review Guidelines","permalink":"/si-docs/project-management/coding-conventions/code-reviews"}}');var r=s(4848),i=s(8453);const o={sidebar_position:4,descriptions:"Conventions and best practices for pull requests."},c="Pull Requests",l={},a=[{value:"Step-by-Step GitHub Process",id:"step-by-step-github-process",level:2},{value:"Pull Request Requirements",id:"pull-request-requirements",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"pull-requests",children:"Pull Requests"})}),"\n",(0,r.jsx)(n.h2,{id:"step-by-step-github-process",children:"Step-by-Step GitHub Process"}),"\n",(0,r.jsx)(n.p,{children:"If you're new to code review on GitHub, follow these steps:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Create a Feature Branch:"})," Never push directly to the ",(0,r.jsx)(n.code,{children:"main"})," branch. Create a new branch for your work (See ",(0,r.jsx)(n.a,{href:"/si-docs/project-management/coding-conventions/branching",children:"Branching"})," for how to name your branch)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Make Your Changes & Commit:"})," Work on your task and commit your code to your branch."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Push and Create a Pull Request (PR):"}),' Push your branch to GitHub and go to the "Pull Requests" tab to create a new PR. Target the ',(0,r.jsx)(n.code,{children:"main"})," branch."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fill out the PR Template:"})," We have a PR template. Describe what you did."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Request Reviewers:"})," Assign one or more team members as reviewers. This is how you officially ask for a code review (See ",(0,r.jsx)(n.a,{href:"/si-docs/project-management/coding-conventions/code-reviews",children:"Code Review"})," for steps to review codes)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Address Feedback:"})," Reviewers will leave comments. Discuss, make any requested changes, and push new commits to your branch. The PR will update automatically."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Merge:"})," Once approved, you (or a teamate) can merge the PR into ",(0,r.jsx)(n.code,{children:"main"}),". Delete the feature branch after a successful merge (unless you intend to continue working on it)."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"pull-request-requirements",children:"Pull Request Requirements"}),"\n",(0,r.jsx)(n.p,{children:"All pull request within the project must adhere to the following requirements:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"At least one team member should review submitted code."}),"\n",(0,r.jsx)(n.li,{children:"If applicable, a different team member should witness the code working live."}),"\n",(0,r.jsxs)(n.li,{children:["Reviewers should:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Identify syntactical errors."}),"\n",(0,r.jsx)(n.li,{children:"Ensure changes align with the task requirements."}),"\n",(0,r.jsx)(n.li,{children:"Verify adherence to Section 8.1 Coding Guidelines."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"All reviewer's comments must be addressed before the pull request is completed."}),"\n",(0,r.jsx)(n.li,{children:"All merge conflicts must be resolved before the pull request is completed."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var t=s(6540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);